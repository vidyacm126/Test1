<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:module-msi-logger="http://www.mulesoft.org/schema/mule/module-msi-logger" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/module-msi-logger http://www.mulesoft.org/schema/mule/module-msi-logger/current/mule-module-msi-logger.xsd">
	<flow name="prcsSubscriptionListSub360Flow" doc:id="5c0a3552-a9bc-4a4e-905c-713273fd6145" >
		<module-msi-logger:started doc:name="STARTED" doc:id="f2fd3f15-0e2d-4c0c-bcfa-abca2f9b598b" msiLoggingResourceName="#[p('secure::resource.prcs.subscriptionlist')]" target="msiLogging"/>
		<module-msi-logger:unique-transaction doc:name="UNIQUE TRANSACTION" doc:id="5793d52e-34b0-443c-8bd9-24b9acd4a5ef" ignioUniqueTransaction="#['filter_by_value is ' ++ payload.filter_by_value default 'NO filter_by_value']" target="msiLogging"/>
		<ee:transform doc:name="Map Input Parameters" doc:id="52982573-c04e-41fc-bc0d-46231e1f0b73" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="subc360data" ><![CDATA[%dw 2.0
output application/json
---
{
	"customer_number" : payload.customer_number joinBy "," default '',
	"mr_id" : if(isEmpty(payload.mr_id)) write(null, 'application/json') else "'{" ++ (  payload.mr_id joinBy "," ) ++ "}'",
	"sort_by" : payload.sort_by default 'creation_date desc',
	"limit" : payload.limit default 20,
	"offset" : payload.offset default 10,
	"filter_by_value" : payload.filter_by_value default null,
	"package" : payload.package default ''
}]]></ee:set-variable>
			</ee:variables>
		
</ee:transform>
		<set-variable value="${secure::prcs.subscriptionlistsub360db.query}" doc:name="c360subcriptionlistquery" doc:id="06f177db-9ad9-45aa-8f6b-bc0649702243" variableName="c360subcriptionlistquery"/>
		<choice doc:name="Check if customer_number or package is null" doc:id="cdfca2c8-3990-4db7-b744-53db5e60d1a4" >
			<when expression="#[!isEmpty(vars.subc360data.customer_number) or !isEmpty(vars.subc360data.package)]">
				<module-msi-logger:processing doc:name="Before calling Mule System API for C360 DB to call get_subscription_details function" doc:id="0248b524-3faa-42ad-b9c2-89d633c820c8" ignioLogMessage="#['Before calling C360 DB Function and input to DB is ' ++ vars.c360subcriptionlistquery]" />
				<until-successful maxRetries="${secure::mule.http.reconnection.retry}" doc:name="Untill Successfull" doc:id="8ceb1093-1c6b-40e0-84f8-8c0c484b5a96" millisBetweenRetries="${secure::mule.http.reconnection.ms}">
			<http:request method="#[p('secure::http.mule.sys.c360db.method')]" doc:name="Invoke Mule System API for Calling C360 DB Function" doc:id="47476e01-bb58-4130-a240-1829ad917646" config-ref="HTTP_Mule_Request_Configuration" path="${secure::prcs.subscriptiondetailsc360db.path}" sendBodyMode="ALWAYS" responseTimeout="${secure::http.mule.sys.c360db.response.timeout}">
				<http:body><![CDATA[#[%dw 2.0
output application/json
---
{
    "query": vars.c360subcriptionlistquery
}]]]></http:body>
				<http:response-validator>
					<http:success-status-code-validator values="${secure::http.mule.sys.c360db.responsevalidator.subscriptiondetails}" />
				</http:response-validator>
			</http:request>
		</until-successful>
				<module-msi-logger:processing doc:name="After calling Mule System API for C360 DB to call get_subscription_details function" doc:id="d7d1e022-6e28-4c68-a723-a44c3f46116b" ignioLogMessage="#['After calling C360 DB Function and Response from DB is ' ++ write(payload[0].subscription_data.value, &quot;application/json&quot;)]" />
				<ee:transform doc:name="Map Final Response" doc:id="39c869f1-987f-45f8-b3ce-3d8fff8f6e08">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
if(isEmpty(payload[0].subscription_data.value)) payload[0].subscription_data else read(payload[0].subscription_data.value,'application/json')]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Map Final Response" doc:id="d9927b8e-77b5-4693-ab5e-ad8b97527561">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"message":'customer_number and package values are null. Please pass either of value in the request'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<module-msi-logger:completed-success doc:name="COMPLETED(Success)" doc:id="1021b6cf-4d20-4fd6-987e-82ac6c36c513" msiLoggingResourceName="#[p('secure::resource.prcs.subscriptiondetails')]"/>
		<error-handler>
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="d892509a-42e9-4925-b5d8-6c693e8d2b2b" type="ANY">
				<module-msi-logger:processing doc:name="PROCESSING" doc:id="17ada271-f99c-48d5-99c6-c33910e977e4" ignioLogMessage="Inside Exception Handling Block of PrcsQuotecreationFlow"/>
				<async doc:name="Async" doc:id="57a28f0f-b539-4722-b0e6-5ce93042fa57" >
					<ee:transform doc:name="Payload sent to Error Handler" doc:id="1f83a5c0-4c7a-497a-a74c-fce579048f06">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	ErrorMessage: {
		UniqueQualifier: p('secure::er.uniq.qualifier.prcs.getsubscriptionlist'),
		CustomMessage:  p('secure::er.mod.name.prcs.getsubscriptionlist') ++ ":: Error::" ++ error.errorType.namespace ++ error.errorType.identifier ++ ":: " ++ p('secure::er.cust.msg.prcs.getsubscriptionlist'),
		Error: {
			time: now() as String {format: "dd-MMM-yyyy HH:mm:ss"},
			error: error.detailedDescription,
			errorType: error.errorType.namespace ++ error.errorType.identifier,
			errorDump: error.detailedDescription ,
			service: p('secure::resource.prcs.subscriptionlist'),
			user: p('secure::er.user'),
			nestedErrorInfo: {
				time: "1",
				error: "1",
				errorType: "1",
				errorDump: "1",
				service1: "1",
				user: "1"
			}
		},
		Module: {
			ModuleName: p('secure::er.mod.name.prcs.getsubscriptionlist'),
			ServiceName: p('secure::resource.prcs.subscriptionlist')
		},
		Action: {
			Email: {
				SendEmail: p('secure::er.send.email'),
				DistributionList: p('secure::er.email.list.prcs.getsubscriptiondetails')
			},
			Ticket: {
				CreateTicket: p('secure::er.create.ticket'),
				Impact: p('secure::er.impact'),
				Urgency: p('secure::er.urgency') ,
				SupportTeam: p('secure::er.support.team'),
				Category: p('secure::er.category'),
				SubCategory: p('secure::er.sub.category'),
				CMDBCI: p('secure::er.CMDBCI')
			}
		},
		SuppressDuplicates: {
			EnableSuppression: p('secure::er.enable.suppression'),
			Suppress_On_Same_Message: p('secure::er.suppress.on.same.message')
		}
	}
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
					<vm:publish doc:name="Publishing Error Events" doc:id="45d9c421-af3e-4c35-8b4b-0c550d25c79d" config-ref="ErrorHandler_VM_Config" queueName="ErrorHandlerVMQueue" timeout="${secure::er.vm.timeout}"/>

				</async>
				<ee:transform doc:name="Error Message Payload" doc:id="b50e15cf-29df-43e2-aba8-ad295f882f11" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
    "result": {
        "warningMessage": "Exception occurred",
        "success":false,
        "error": error.description
    }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<module-msi-logger:completed-error doc:name="COMPLETED(Error)" doc:id="5c4fab50-d5a0-4321-a582-27b3b7fea2a1" msiLoggingResourceName="#[p('secure::resource.prcs.subscriptiondetails')]"/>
			
</on-error-propagate>
</error-handler>		
	</flow>
</mule>
